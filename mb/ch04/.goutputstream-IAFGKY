#include <cstdlib>
#include <ctime>
#include <iostream>

#include "MB_04_10.hpp"

std::ostream& operator<<(std::ostream& out, Gesture e)
{
    switch (e)
    {
    case Gesture::Paper: out << "Paper"; break;
    case Gesture::Scissors: out << "Scissors"; break;
    case Gesture::Rock: out << "Rock"; break;
    default: out << "Error"; break;
    }
    return out;
}

std::istream& operator>>(std::istream& in, Gesture& e)
{
    unsigned uintIn;
    in >> uintIn;
    switch (uintIn)
    {
    case static_cast<int>(Gesture::Paper): e = Gesture::Paper; break;
    case static_cast<int>(Gesture::Scissors): e = Gesture::Scissors; break;
    case static_cast<int>(Gesture::Rock): e = Gesture::Rock; break;
    default: e = Gesture::Error; break;
    }
    return in;
}

Gesture uint2Gesture(unsigned source)
{
    Gesture output = Gesture::Error;
    switch (source)
    {
    case static_cast<int>(Gesture::Paper): output = Gesture::Paper; break;
    case static_cast<int>(Gesture::Scissors): output = Gesture::Scissors; break;
    case static_cast<int>(Gesture::Rock): output = Gesture::Rock; break;
    default: output = Gesture::Error; break;
    }
    return output;
}

Gesture Player::getGesture()
{
    this->showOptions();

    Gesture selection = Gesture::Error;
    std::cin >> selection;
    while (selection == Gesture::Error)
    {
        std::cout << "Your selection is not on list, try again." << std::endl;
        this->showOptions();
        std::cin >> selection;
    }

    return selection;
}

void Player::showOptions()
{
    std::cout << "1. Paper" << std::endl
              << "2. Scissors" << std::endl
              << "3. Rock" << std::endl;
    std::cout << "Select Your gesture: ";
}

Gesture Opponent::getGesture()
{
    srand(time(NULL));
    unsigned randomNumber = (rand() % 3) + 1;
    Gesture selection = uint2Gesture(randomNumber);
    return selection;
}

void Game::playOneRound()
{
    Player player = Player();
    Opponent opponent = Opponent();

    Gesture oSelection = opponent.getGesture();
    Gesture pSelection = player.getGesture();
}

Result Game::getResult(Gesture oGesture, Gesture pGesture)
{
    Result result = Result::Draw;

    if (oGesture == pGesture)
    {
        result = Result::Draw;
    }

    return result;
}
